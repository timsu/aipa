// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- workspaces

model Workspace {
  id        String          @id @default(cuid())
  name      String
  users     WorkspaceUser[]
  projects  Project[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("workspaces")
}

model WorkspaceUser {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  role        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@id([userId, workspaceId])
  @@map("workspace_users")
}

model Project {
  id           String        @id @default(cuid())
  remoteId     String?
  name         String
  shortcode    String        @db.Char(6)
  color        String        @db.Char(6)
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  meta         Json?
  issues       Issue[]
  fields       IssueField[]
  states       IssueState[]
  types        IssueType[]
  integrations Integration[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  archivedAt   DateTime?
  deletedAt    DateTime?

  @@map("projects")
}

model IssueType {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        String    @db.Char(20)
  meta        Json?
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("issue_types")
}

model IssueState {
  id          String    @id @default(cuid())
  name        String    @db.Char(30)
  description String?
  type        String    @db.Char(20)
  meta        Json?
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("issue_states")
}

model IssueField {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        String    @db.Char(20)
  meta        Json?
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("issue_fields")
}

model Integration {
  id           String    @id @default(cuid())
  name         String
  accessToken  String?
  refreshToken String?
  meta         Json?
  projectId    String?
  project      Project?  @relation(fields: [projectId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@map("integrations")
}

// --- issues

model Issue {
  id          String  @id @default(cuid())
  remoteId    String?
  title       String
  description Json?
  type        String  @db.Char(20)
  number      Int
  state       String  @db.Char(30)

  fields      Json?
  meta        Json?
  projectId   String?
  project     Project?       @relation(fields: [projectId], references: [id])
  parentId    String?
  parent      Issue?         @relation("issue_parent", fields: [parentId], references: [id])
  children    Issue[]        @relation("issue_parent")
  assigneeId  String?
  assignee    User?          @relation("issue_assignee", fields: [assigneeId], references: [id])
  creatorId   String?
  creator     User?          @relation("issue_creator", fields: [creatorId], references: [id])
  comments    IssueComment[]
  attachments Attachment[]
  followers   User[]         @relation("issue_followers")

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  dueAt      DateTime?
  deletedAt  DateTime?
  startedAt  DateTime?
  resolvedAt DateTime?
  archivedAt DateTime?

  @@index([projectId, number]) // search for issues by name
  @@index([projectId, state]) // search by state
  @@index([projectId, resolvedAt]) // search by resolution
  @@map("issues")
}

model IssueComment {
  id        String    @id @default(cuid())
  type      String
  message   String
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  issueId   String
  issue     Issue     @relation(fields: [issueId], references: [id])
  createdAt DateTime  @default(now())
  editedAt  DateTime?
  deletedAt DateTime?

  @@map("issue_comments")
}

model Attachment {
  id        String    @id @default(cuid())
  name      String
  size      Float
  type      String
  path      String
  issueId   String
  issue     Issue     @relation(fields: [issueId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@map("attachments")
}

// --- auth

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  welcomedAt    DateTime?
  activeWorkspace String?
  meta          Json      @default("{}")

  workspaces     WorkspaceUser[]
  issuesCreated  Issue[]         @relation("issue_creator")
  issuesAssigned Issue[]         @relation("issue_assignee")
  issuesFollowed Issue[]         @relation("issue_followers")
  issueComments  IssueComment[]
  attachments    Attachment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
